scree(COPIA)
fa.parallel(COPIA,n.obs=200,fa="fa",fm="minres")
# install.packages("EnvStats")
library(EnvStats)
library(car)
library(foreign)
getwd()
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
#Cogemos las variables de interes, es decir, elimino las etiquetas del pais
datos<-datos_enteros[,2:12]
head(datos)
cbind(apply(is.na(datos),2,sum),apply(is.na(datos),2,sum)/dim(datos)[1])
not_available<-function(data,na.rm=F){
data[is.na(data)]<-mean(data,na.rm=T)
data
}
datos_pca<-as.data.frame(apply(datos, 2, not_available))
cbind(apply(is.na(datos_pca),2,sum),apply(is.na(datos_pca),2,sum)/dim(datos_pca)[1])
#Definimos las medidas resistentes
PMC<-function(x){ return((as.double(quantile(x,0.25))+as.double(quantile(x,0.75)))/2)}
trimedia<-function(x){return((median(x)+PMC(x))/2)}
centrimedia<-function(x){
indices<-(x>quantile(x,0.25)&x<quantile(x,0.75))
valores<-x[indices]
return(sum(valores)/length(valores))
}
RIQ<-function(x){return(quantile(x,0.75)-quantile(x,0.25))}
MEDA<-function(x){return(median(abs(x-median(x))))}
CVc<-function(x){return((quantile(x,0.75)-quantile(x,0.25))/(quantile(x,0.75)+quantile(x,0.25)))}
H1<-function(x){return((quantile(x,0.25)+quantile(x,0.75)-2*median(x))/(2*median(x)))}
H2<-function(x){return(median(x)-(quantile(x,0.1)+quantile(x,0.9))/(2))}
H3<-function(x){return(H2(x)/median(x))}
#Creamos una función que aplique todas estas medidas
descriptivo<-function(x){
temp<-rbind(PMC(x),trimedia(x),centrimedia(x))
rownames(temp)<-c("PMC","Trimedia","Centrimedia")
centralidad<-list(clasica=list(media=mean(x)),resistente=temp)
temp<-rbind(RIQ(x),MEDA(x),CVc(x))
rownames(temp)<-c("Rango Inter-Cuartílico","MEDA","CVc")
dispersion<-list(clasica=list(desviación_típica=sd(x),Coef_varización=sd(x)/mean(x),rango=range(x)),resistente=temp)
temp<-rbind(H1(x),H2(x),H3(x))
rownames(temp)<-c("Asimetría de Yule","Asimetría de Kelly","Asimetría de Kelly adimensional")
forma<-list(clasica=list(skewness=skewness(x),kurtosis=kurtosis(x)),resistente=temp)
cat(names(x))
return(list(centralidad=centralidad,dispersion=dispersion,forma=forma))
}
descriptivo(datos_pca[,1])
hist(col="darkblue",datos_pca[,1],main="ZPOBDENS")
descriptivo(datos_pca[,2])
hist(col="darkblue",datos_pca[,2],main="ZMINFAN")
descriptivo(datos_pca[,3])
hist(col="darkblue",datos_pca[,3],main="ZESPVIDA")
descriptivo(datos_pca[,4])
hist(col="darkblue",datos_pca[,4],main="ZPOBURB")
descriptivo(datos_pca[,5])
hist(col="darkblue",datos_pca[,5],main="ZTMEDICO")
descriptivo(datos_pca[,6])
hist(col="darkblue",datos_pca[,6],main="ZPAGRICU")
descriptivo(datos_pca[,7])
hist(col="darkblue",datos_pca[,7],main="ZPSERVI")
descriptivo(datos_pca[,8])
hist(col="darkblue",datos_pca[,8],main="ZTLIBROP")
descriptivo(datos_pca[,9])
hist(col="darkblue",datos_pca[,9],main="ZTEJERCI")
descriptivo(datos_pca[,10])
hist(col="darkblue",datos_pca[,10],main="ZTPOBACT")
descriptivo(datos_pca[,11])
hist(col="darkblue",datos_pca[,11],main="ZTENERGI")
colfunc<-colorRampPalette(c("darkblue","lightblue"))
boxplot(datos_pca,
xlab=NULL,
ylab="Nombre-y",
col=colfunc(15),
las=2)
par(mar=c(1,1,1,1))
par(mfrow=c(3,5))
invisible(apply(datos_pca, 2,function(x){hist(x,main=NULL,col="darkblue",xlab=NULL,ylab=NULL)}))
outlier<-function(data,na.rm=T){
H<-1.5*IQR(data)
if(any(data<=(quantile(data,0.25,na.rm = T)-H))){
data[data<=quantile(data,0.25,na.rm = T)-H]<-NA
data[is.na(data)]<-mean(data,na.rm=T)
data<-outlier(data)}
if(any(data>=(quantile(data,0.75, na.rm = T)+H))){
data[data>=quantile(data,0.75, na.rm = T)+H]<-NA
data[is.na(data)]<-mean(data,na.rm=T)
data<-outlier(data)
}
return(data)
}
datos_pca[,-12:-13]<-apply(datos_pca[,-12:-13], 2, outlier)
boxplot(datos_pca,
xlab=NULL,
ylab="Nombre-y",
col=colfunc(15),
las=2)
par(mar=c(1,1,1,1))
par(mfrow=c(3,5))
invisible(apply(datos_pca, 2, function(x){
qqnorm(x,main=NULL)
abline(a=0,b=1,col="red")
}))
#ind<-which(datos_enteros$relig=="Musulma."|datos_enteros$relig=="Católica")
#factores<-datos_enteros$relig[ind]
#Como se han eliminado los valores outlier, usamos con centro la media en vez de la mediana
#H0:homocedasticidad
#apply(datos_pca[ind,], 2, function(x){
#  if(leveneTest(x,as.factor(factores),center=mean)$"Pr(>F)"[1]>0.05){
#    "Existe homocedasticidad entre los grupos"
#  }
#  else{"No existe homocedasticidad entre los grupos"}
#  })
summary(datos)
summary(datos_pca)
cor(datos_pca)
library(psych)
# Se normalizan los datos
datos_normalizados<-scale(datos_pca)
# Se hace el test de esfericidad
cortest.bartlett(cor(datos_normalizados))
PCA<-prcomp(datos_pca, scale=T, center = T)
PCA$rotation
PCA$sdev
summary(PCA)
library("ggplot2")
# El siguiente gr?fico muestra la proporci?n de varianza explicada
varianza_explicada <- PCA$sdev^2 / sum(PCA$sdev^2)
ggplot(data = data.frame(varianza_explicada, pc = 1:11),
aes(x = pc, y = varianza_explicada, fill=varianza_explicada )) +
geom_col(width = 0.3) +
scale_y_continuous(limits = c(0,0.6)) + theme_bw() +
labs(x = "Componente principal", y= " Proporci?n de varianza explicada")
# El siguiente gr?fico muestra la proporci?n de varianza explicada
varianza_acum<-cumsum(varianza_explicada)
ggplot( data = data.frame(varianza_acum, pc = 1:11),
aes(x = pc, y = varianza_acum ,fill=varianza_acum )) +
geom_col(width = 0.5) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() +
labs(x = "Componente principal",
y = "Proporci?n varianza acumulada")
PCA$sdev^2
mean(PCA$sdev^2)
library("factoextra")
fviz_pca_var(PCA,
repel=TRUE,col.var="cos2",
legend.title="Distancia")+theme_bw()
fviz_pca_var(PCA,axes=c(1,3),
repel=TRUE,col.var="cos2",
legend.title="Distancia")+theme_bw()
fviz_pca_var(PCA,axes=c(2,3),
repel=TRUE,col.var="cos2",
legend.title="Distancia")+theme_bw()
# Observaciones en la primera y segunda componente principal
fviz_pca_ind(PCA,col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel=TRUE,legend.title="Contrib.var")+theme_bw()
# Observaciones en la primera y tercera componente principal
fviz_pca_ind(PCA,axes=c(1,3),col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel=TRUE,legend.title="Contrib.var")+theme_bw()
# Observaciones en la segunda y tercera componente principal
fviz_pca_ind(PCA,axes=c(2,3),col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel=TRUE,legend.title="Contrib.var")+theme_bw()
# Variables y observaciones en las 1?  y 2? componente principal
fviz_pca(PCA,
alpha.ind ="contrib", col.var = "cos2",col.ind="seagreen",
gradient.cols = c("#FDF50E", "#FD960E", "#FD1E0E"),
repel=TRUE,
legend.title="Distancia")+theme_bw()
# Variables y observaciones en las 1?  y 3? componente principal
fviz_pca(PCA,axes=c(1,3),
alpha.ind ="contrib", col.var = "cos2",col.ind="seagreen",
gradient.cols = c("#FDF50E", "#FD960E", "#FD1E0E"),
repel=TRUE,
legend.title="Distancia")+theme_bw()
# Variables y observaciones en las 2  y 3? componente principal
fviz_pca(PCA,axes=c(2,3),
alpha.ind ="contrib", col.var = "cos2",col.ind="seagreen",
gradient.cols = c("#FDF50E", "#FD960E", "#FD1E0E"),
repel=TRUE,
legend.title="Distancia")+theme_bw()
head(PCA$x,n=3)
library("polycor")
poly_cor<-hetcor(datos_pca)$correlations
modelo1<-fa(poly_cor,
nfactors = 3,
rotate = "none",
fm="mle") # modelo máxima verosimilitud
modelo2<-fa(poly_cor,
nfactors = 3,
rotate = "none",
fm="minres") # modelo minimo residuo
# Comparacion comunalidades
sort(modelo1$communality,decreasing = T)->c1
sort(modelo2$communality,decreasing = T)->c2
head(cbind(c1,c2))
sort(modelo1$uniquenesses,decreasing = T)->u1
sort(modelo2$uniquenesses,decreasing = T)->u2
head(cbind(u1,u2))
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
library(stats)
factanal(datos_pca,factors=10, rotation="none")
library(stats)
factanal(datos_pca,factors=3, rotation="none")
library(stats)
factanal(datos_pca,factors=2, rotation="none")
library(stats)
factanal(datos_pca,factors=1, rotation="none")
library(stats)
factanal(datos_pca,factors=2, rotation="none")
library(stats)
factanal(datos_pca,factors=3, rotation="none")
scree(poly_cor)
fa.parallel(poly_cor,n.obs=200,fa="fa",fm="minres")
# El paquete solo se instala una vez para evitar errores de ejecución puesto que está en nuestro repositorio local.
# install.packages("MVN")
library(MVN)
outliers <- mvn(data = datos[,-1], mvnTest = "hz", multivariateOutlierMethod = "quan")
royston_test <- mvn(data = datos[,-1], mvnTest = "royston", multivariatePlot = "qq")
hz_test <- mvn(data = datos_pca[,-1], mvnTest = "hz")
royston_test <- mvn(data = datos_pca[,-1], mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos_pca[,-1], mvnTest = "hz")
hz_test$multivariateNormality
royston_test <- mvn(data = datos_pca[,-1], mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos_pca[,-1], mvnTest = "hz")
hz_test$multivariateNormality
royston_test <- mvn(data = datos_pca[,-1], mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos_pca[,-1], mvnTest = "hz")
hz_test$multivariateNormality
especie<-c("a","a","a","a","a","a","a","a","a","a","b","b","b","b","b","b","b","b","b","b")
pata<-c(191,185,200,173,171,160,188,186,174,163,186,211,201,242,184,211,217,223,208,199)
abdomen<-c(131,134,137,127,128,118,134,129,131,115,107,122,144,131,108,118,122,127,125,124)
organo_sexual<-c(53,50,52,50,49,47,54,51,52,47,49,49,47,54,43,51,49,51,50,46)
datos<-data.frame(especie,pata,abdomen,organo_sexual)
datos$especie<-as.factor(datos$especie)
library(ggplot2)
library(ggpubr)
p1 <- ggplot(data = datos, aes(x = pata, fill = especie)) +
geom_histogram(position = "identity", alpha = 0.5)
p2 <- ggplot(data = datos, aes(x = abdomen, fill = especie)) +
geom_histogram(position = "identity", alpha = 0.5)
p3 <- ggplot(data = datos, aes(x = organo_sexual, fill = especie)) +
geom_histogram(position = "identity", alpha = 0.5)
ggarrange(p1, p2, p3, nrow = 3, common.legend = TRUE)
pairs(x = datos[, c("pata","abdomen","organo_sexual")],
col = c("firebrick", "green3")[datos$especie], pch = 19)
library(scatterplot3d)
scatterplot3d(datos$pata, datos$abdomen, datos$organo_sexual,
color = c("firebrick", "green3")[datos$especie], pch = 19,
grid = TRUE, xlab = "pata", ylab = "abdomen",
zlab = "organo sexual", angle = 65, cex.axis = 0.6)
legend("topleft",
bty = "n", cex = 0.8,
title = "Especie",
c("a", "b"), fill = c("firebrick", "green3"))
# Representación mediante Histograma de cada variable para cada especie
par(mfcol = c(2, 3))
for (k in 2:4) {
j0 <- names(datos)[k]
#br0 <- seq(min(datos[, k]), max(datos[, k]), le = 11)
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$especie)[i]
x <- datos[datos$especie == i0, j0]
hist(x, proba = T, col = grey(0.8), main = paste("especie", i0), xlab = j0)
lines(x0, dnorm(x0, mean(x), sd(x)), col = "red", lwd = 2)
}
}
# Representación de cuantiles normales de cada variable para cada especie
par(mfrow=c(2,3))
for (k in 2:4) {
j0 <- names(datos)[k]
x0 <- seq(min(datos[, k]), max(datos[, k]), le = 50)
for (i in 1:2) {
i0 <- levels(datos$especie)[i]
x <- datos[datos$especie == i0, j0]
qqnorm(x, main = paste("especie", i0, j0), pch = 19, col = i + 1)
qqline(x)
}
}
library(reshape2)
library(knitr)
library(dplyr)
datos_tidy <- melt(datos, value.name = "valor")
aggregate(formula = valor ~ especie + variable, data = datos_tidy,
FUN = function(x){shapiro.test(x)$p.value})
# El paquete solo se instala una vez para evitar errores de ejecución puesto que está en nuestro repositorio local.
# install.packages("MVN")
library(MVN)
outliers <- mvn(data = datos[,-1], mvnTest = "hz", multivariateOutlierMethod = "quan")
royston_test <- mvn(data = datos[,-1], mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos[,-1], mvnTest = "hz")
hz_test$multivariateNormality
royston_test <- mvn(data = datos_pca, mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos_pca, mvnTest = "hz")
hz_test$multivariateNormality
royston_test <- mvn(data = datos_pca[,-1], mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos_pca[,-1], mvnTest = "hz")
hz_test$multivariateNormality
View(datos)
# El paquete solo se instala una vez para evitar errores de ejecución puesto que está en nuestro repositorio local.
# install.packages("MVN")
library(MVN)
outliers <- mvn(data = datos_pca, mvnTest = "hz", multivariateOutlierMethod = "quan")
library(MVN)
outliers <- mvn(data = datos_pca, mvnTest = "hz", multivariateOutlierMethod = "quan")
royston_test <- mvn(data = datos_pca, mvnTest = "royston", multivariatePlot = "qq")
royston_test$multivariateNormality
hz_test <- mvn(data = datos_pca, mvnTest = "hz")
hz_test$multivariateNormality
library(biotools)
boxM(data = datos_pca, grouping = datos)
library(biotools)
boxM(data = datos_pca, grouping = datos[, 1])
library(biotools)
boxM(data = datos_pca[, 2:], grouping = datos[, 1])
library(biotools)
boxM(data = datos_pca[, -1], grouping = datos[, 1])
library(biotools)
boxM(data = datos_pca[, -1], grouping = datos_pca[, 1])
library(biotools)
boxM(data = datos_pca[, 2:11], grouping = datos_pca[, 1])
boxM(data = datos[, 2:4], grouping = datos[, 1])
library(biotools)
boxM(data = datos_pca[, 2:4], grouping = datos_pca[, 1])
library(biotools)
boxM(data = datos_pca[, 2:11], grouping = datos_pca[, 1])
View(datos)
View(datos)
View(datos_enteros)
# El paquete solo se instala una vez para evitar errores de ejecución puesto que está en nuestro repositorio local.
# install.packages("biotools")
library(biotools)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros[,2:12]
datos:enteros[,1]
datos_enteros[,1]
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
boxM(data = datos[, 2:4], grouping = datos[, 1])
datos[,1]
datos[,2:4]
datos_enteros[,1]
boxM(data = datos_enteros[1:20, 2:12], grouping = datos[, 1])
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
boxM(data = datos[, 2:4], grouping = datos[, 1])
datos_enteros[, 2:12] <- as.numeric(datos_enteros[, 2:12])
col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , numeric)
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , factor)
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.numeric)
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.float)
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros[11,1]<-"china"
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros[11,1]<-"china"
datos_enteros[11,1]<-"china"# to do it for some names in a vector named 'col_names'
datos_enteros[11,1]<-"china"datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
datos_enteros[11,1]<-"china"
datos_enteros[11,1]<-"china"
datos_enteros[11,1]<-"china"
datos_enteros[11,1]<-as.factor("china")
datos_enteros[11,1]<-datos_enteros[8,1]
datos_enteros[11:34,1]<-datos_enteros[8,1]
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
datos_enteros[11:34,1]<-datos_enteros[8,1]
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
datos_enteros[11:34,1]<-datos_enteros[8,1]
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
datos_enteros[11:34,1]<-"china"
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
datos_enteros[11:34,1]<-"china"
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros[1:11,1]<-"rusia"
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
datos_enteros[11:34,1]<-"china"
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros[1:8,1]<-"aa"
datos_enteros[8:11,1]<-"rusia"
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
datos_enteros[11:34,1]<-"china"
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
datos_enteros[11:34,1]<-"china"
datos_enteros[1:8,1]<-"aa"
datos_enteros[8:11,1]<-"rusia"
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
datos_enteros[15:34,1]<-"china"
datos_enteros[1:15,1]<-"aa"
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
datos_enteros[15:34,1]<-"china"
datos_enteros[1:15,1]<-"aa"
datos_enteros[1:15,1]<-"aa"
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
#col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
#datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
#col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
#datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, -1], grouping = datos_enteros[, 1])
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
#col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
#datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
#col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
#datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[,1])
#col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
#datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros<-read.spss("DB_3.sav", to.data.frame = TRUE)
datos_enteros[15:34,1]<-"china"
datos_enteros[1:15,1]<-"aa"
#col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
#datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.numeric)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.numeric)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos_enteros$PAIS <- as.factor(datos_enteros$PAIS)
col_names <- names(datos_enteros[,2:12])
# to do it for some names in a vector named 'col_names'
datos_enteros[col_names] <- lapply(datos_enteros[col_names] , as.double)
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
datos[,1]
datos_enteros[,1]
boxM(data = datos_enteros[, 2:12], grouping = datos_enteros[, 1])
